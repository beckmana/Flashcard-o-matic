{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Home/Deck.js","Home/DeckList.js","Home/Home.js","Study/StudyCard.js","Study/NotEnoughCards.js","Study/Study.js","DeckForms/DeckForm.js","DeckForms/EditDeck.js","ViewDeck/Card.js","ViewDeck/CardList.js","ViewDeck/ViewDeck.js","CardForms/CardForm.js","CardForms/EditCard.js","CardForms/AddCard.js","DeckForms/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","cardId","updateCard","updatedCard","deleteCard","append","Deck","handleDelete","style","margin","onClick","length","description","to","DeckList","useState","decks","setDecks","history","useHistory","useEffect","abortController","AbortController","listDecks","then","abort","window","confirm","go","deckHtml","map","Home","StudyCard","cardsInDeck","index","setIndex","isFlipped","setIsFlipped","back","front","i","resetStudy","push","handleNext","NotEnoughCards","Study","useParams","setDeck","loadedDeck","loadDeck","aria-label","aria-current","DeckForm","handleChange","htmlFor","type","onChange","value","rows","EditDeck","editDeck","setEditDeck","getDeck","handleSubmit","event","preventDefault","onSubmit","target","Card","CardList","cardHtml","ViewDeck","confirmDelete","console","log","CardForm","setFormData","formData","EditCard","readCard","cancel","AddCard","initialForm","done","CreateDeck","newDeck","setNewDeck","addDeck","Layout","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e5b8152.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Deck({ deck, handleDelete }) {\r\n    \r\n    return (\r\n        <div className=\"card border-dark w-75\" style={{ margin: \"10px\" }}  key={deck.id}>\r\n                <div className=\"card-body\">\r\n                    <h3 className=\"card-title\">\r\n                        {deck.name}\r\n                        <button className=\"btn btn-danger float-right\" onClick={() => handleDelete(deck.id)}>Delete</button>\r\n                    </h3>\r\n                    <p className=\"card-text\">\r\n                    <i>{deck.cards.length} cards</i>\r\n                    <br />\r\n                        {deck.description}\r\n                    </p>\r\n                    <Link to={`/decks/${deck.id}/study`}><button className=\"btn btn-secondary mr-2\">Study</button></Link>\r\n                    <Link to={`/decks/${deck.id}`}><button className=\"btn btn-info\">View</button></Link>\r\n                </div>\r\n            </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Deck","import React, {useEffect, useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\r\nimport Deck from \"./Deck\";\r\n\r\nfunction DeckList() {\r\n    const [decks, setDecks] = useState([])\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        listDecks(abortController.signal).then(setDecks);\r\n\r\n        return () => abortController.abort();\r\n    }, [decks]);\r\n\r\n    const handleDelete = async (deckId) => {\r\n        const confirmDelete = window.confirm(\"Delete this deck?\\nYou will not be able to recover it.\");\r\n        \r\n        if (confirmDelete) {\r\n            await deleteDeck(deckId);\r\n            history.go(0);\r\n        }\r\n    }\r\n\r\n    const deckHtml = decks.map(deck => {\r\n        return (\r\n            <div key={deck.id}>\r\n                <Deck deck={deck} handleDelete={handleDelete} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div key='2000'>\r\n            {deckHtml}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DeckList;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeckList from \"./DeckList\"\r\n\r\n/*\r\n The Home screen has the following features:\r\n\r\n    x The path to this screen should be \"/\"\".\r\n    - A \"Create Deck\" button is shown and clicking it brings the user to the Create Deck screen.\r\n    - Existing decks are each shown with the deck name, the number of cards, and a “Study,” “View,” and - “Delete” button.\r\n    - Clicking the “Study” button brings the user to the Study screen.\r\n    - Clicking the “Edit” button brings the user to the Edit Deck screen.\r\n    - Clicking the “Delete” button shows a warning message before deleting the deck. \r\n*/\r\n\r\n// Create a stateful deck\r\n// handle on create deck click event to console log click.\r\n// display stateful decks with action buttons that console log the click.\r\n\r\n/*\r\n\r\nAfter creating prototype html components that handle the clicks.\r\n\r\nTake those components and convert them to React components that\r\nthe Home components manages.\r\n\r\n*/\r\n\r\n// TODO: Handle Delete prompt\r\n\r\nfunction Home() {\r\n\r\n    return (\r\n        <>\r\n            <Link to='/decks/new'>\r\n                <button className='btn btn-primary btn-lg'> + Create Deck</button>\r\n            </Link>\r\n            <DeckList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction StudyCard({ cardsInDeck }) {\r\n    const history = useHistory();\r\n    \r\n    const [index, setIndex] = useState(0)\r\n    const [isFlipped, setIsFlipped] = useState(false);\r\n    \r\n    \r\n    const handleFlip = () => {\r\n        setIsFlipped(!isFlipped)\r\n    }\r\n\r\n    const handleNext = () => {\r\n        if (index < cardsInDeck.length - 1) {\r\n            setIndex(i => i = i + 1);\r\n            setIsFlipped(false);\r\n        } else {\r\n            const resetStudy = window.confirm(\"Restart cards?\\n\\nClick 'cancel' to return to the home page\");\r\n            if (resetStudy) {\r\n                setIndex(0);\r\n                setIsFlipped(false);\r\n            } else if (resetStudy === false) {\r\n                history.push(\"/\")\r\n            }\r\n        }\r\n    }\r\n    if (!cardsInDeck) {\r\n        return <p>Loading...</p>\r\n    }\r\n    \r\n        return (\r\n            <div className=\"card border-dark w-75\" style={{ margin: \"10px\" }}>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"text-muted\">Card {index + 1} of {cardsInDeck.length}</h5>\r\n                    <br />\r\n                    <h3 className=\"text-center text-info\"> {isFlipped ? cardsInDeck[index].back : cardsInDeck[index].front} </h3>\r\n                    <button className=\"btn btn-secondary mr-2\" onClick={handleFlip}>Flip</button>\r\n                    {isFlipped ? <button className=\"btn btn-info\" onClick={() => handleNext()}>Next</button> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default StudyCard;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NotEnoughCards({ cardsInDeck, deckId }) {\r\n    if (!cardsInDeck) {\r\n        return <p>Loading...</p>\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Not enough cards.</h3>\r\n            <p>You need at least 3 cards to study. There are {cardsInDeck.length} cards in this deck.</p>\r\n            <Link to={`/decks/${deckId}/cards/new`}>\r\n                <button className=\"btn btn-success mt-2 mb-5\">+ Add Card</button>\r\n        </Link>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NotEnoughCards;\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api/index\";\r\nimport StudyCard from \"./StudyCard\";\r\nimport NotEnoughCards from \"./NotEnoughCards\";\r\n\r\n/*\r\n The Study screen has the following features:\r\n\r\n    xx The path to this screen should include the deckId (i.e., /decks/:deckId/study).\r\n    xx There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\r\n    xx The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\r\n    - Cards are shown one at a time, front-side first.\r\n    - A button at the bottom of each card \"flips\" it to the other side.\r\n    - After flipping the card, the screen shows a next button to continue to the next card.\r\n        - The next button appears after the card is flipped.\r\n    - After the final card in the deck has been shown, a message is shown offering the user the opportunity to restart the deck.\r\n        -  If the user does not restart the deck, they return to the home screen.\r\n    - If the user does not restart the deck, they should return to the home screen.\r\n    - Studying a deck with two or fewer cards should display a \"Not enough cards\" message and a button to add cards to the deck.\r\n        - Clicking the \"Add Cards\" button should take the user to the Add Card screen.\r\n*/\r\n\r\nfunction Study() {\r\n    const { deckId } = useParams();\r\n    const [deck, setDeck] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const loadDeck = async () => {\r\n          const loadedDeck = await readDeck(deckId);\r\n          setDeck(() => loadedDeck);\r\n        };\r\n        loadDeck();\r\n    }, [deckId]);\r\n    \r\n\r\n    if (!deck.cards) {\r\n        return <p>Loading...</p>\r\n    }\r\n    \r\n    return (\r\n        <>\r\n             <nav aria-label='breadcrumb'>\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item text-primary\">\r\n                            <Link to='/'>Home</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item text-primary\">\r\n                            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current='page'>\r\n                            Study\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            <h2>Study: {deck.name}</h2>\r\n            <br />\r\n            {deck.cards.length >= 3 \r\n                    ? <StudyCard cardsInDeck={deck.cards} /> \r\n                    : <NotEnoughCards deckId={deckId} cardsInDeck={deck.cards} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Study;","import React from \"react\";\r\n\r\nfunction DeckForm({ handleChange, deck }) {\r\n    /*\r\n    The differences in displaying the form is in regards to the data given to it.\r\n    If given deck data one knows that there is data to edit.\r\n    If not then one knows that a deck is to be created.\r\n\r\n    Because of this boolean conditional, logic can be created to set function pointers and paths\r\n    to provide correct functionality.\r\n\r\n    Example:\r\n    (deck) ? button.text = 'edit' : 'create';\r\n    (deck) ? path = 'api/edit' : 'api/create';\r\n    fetch(path).then(...);\r\n    */\r\n    return (\r\n        <div className=\"form-group\">\r\n                    <div className=\"row\">\r\n                        <label htmlFor=\"name\" className=\"col-form-label\"> Deck Name: </label>\r\n                        <div className=\"col\">\r\n                            <input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className=\"form-control\"\r\n                                onChange={handleChange}\r\n                                value={deck.name}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"row\">\r\n                        <label htmlFor=\"description\" className=\"col-form-label\">Description: </label>\r\n                        <div className=\"col\">\r\n                            <textarea\r\n                                className=\"form-control\"\r\n                                id=\"description\"\r\n                                name=\"description\"\r\n                                rows=\"5\"\r\n                                onChange={handleChange}\r\n                                value={deck.description}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default DeckForm;","import React, {useState, useEffect} from \"react\";\r\nimport { useHistory, Link, useParams } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../utils/api/index\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\n/*\r\n The Edit Deck screen has the following features:\r\n\r\n    x The path to this screen should include the deckId(i.e., /decks/:deckId/edit).\r\n    - There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck being edited, and finally the text Edit Deck (e.g., Home/Rendering in React/Edit Deck).\r\n    * It displays the same form as the Create Deck screen, except it is pre-filled with information for the existing deck. The user can edit and update the form.\r\n\r\n    - If the user clicks \"Cancel\", the user is taken to the Deck screen.\r\n*/\r\n\r\nfunction EditDeck() {\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    const initialForm = {\r\n        name: '',\r\n        description: ''\r\n    }\r\n    const [editDeck, setEditDeck] = useState({ ...initialForm });\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n\r\n        const getDeck = async () => {\r\n            const deck = await readDeck(deckId, abortController.signal);\r\n            setEditDeck({\r\n                id: deck.id,\r\n                name: deck.name,\r\n                description: deck.description\r\n            });\r\n        }\r\n\r\n        getDeck();\r\n        return () => abortController.abort();\r\n    }, [deckId])\r\n\r\n    const handleChange = ({target}) => {\r\n        setEditDeck({ ...editDeck, [target.name]: target.value });\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const updatedDeck = await updateDeck(editDeck);\r\n        history.push(`/decks/${updatedDeck.id}`);\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <nav aria-label=\"breadcrumb\">\r\n                <ol className=\"breadcrumb\">\r\n                    <li className=\"breadcrumb-item\">\r\n                        <Link to=\"/\">\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"breadcrumb-item\">\r\n                        <Link to={`/decks/${deckId}`}>\r\n                            {editDeck.name}\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                        Edit Deck\r\n                    </li>\r\n                </ol>\r\n                \r\n            </nav>\r\n            <h2>Edit Deck: {editDeck.name}</h2>\r\n            <br />\r\n            <form onSubmit={handleSubmit}>\r\n                <DeckForm deck={editDeck} handleChange={handleChange} />\r\n                <div className=\"float-right\">\r\n                    <Link to=\"/\">\r\n                        <button className=\"btn btn-secondary mr-2\">\r\n                            Cancel\r\n                            </button>\r\n                    </Link>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDeck;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Card({card, deck, handleDelete}) {\r\n\r\n    return (\r\n        <div className=\"card border-dark mt-3 w-75\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <p className=\"col\">{card.front}</p>\r\n                        <p className=\"col\">{card.back}</p>\r\n                    </div>\r\n                    <div className=\"float-right\">\r\n                    <Link to={`/decks/${deck.id}/cards/${card.id}/edit`}>\r\n                        <button className=\"btn btn-secondary mr-2\">\r\n                            Edit\r\n                        </button>\r\n                    </Link>\r\n                        <button className=\"btn btn-danger\" onClick={() => handleDelete(card)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { deleteCard } from \"../utils/api/index\";\r\nimport Card from \"./Card\";\r\n\r\n/* \r\n - Each card in the deck:\r\n        xx is listed on the page under the \"Cards\" heading.\r\n        - shows a question and the answer to the question.\r\n        - has an “Edit” button that takes the user to the Edit - Card screen when clicked.\r\n        - has a “Delete” button that allows that card to be deleted.\r\n*/\r\n\r\nfunction CardList({deck}) {\r\n    const { cards = [] } = deck;\r\n    const history = useHistory();\r\n\r\n    const handleDelete = async (card) => {\r\n            const confirmDelete = window.confirm(\"Delete this card?\\nYou will not be able to recover it.\");\r\n            \r\n            if (confirmDelete) {\r\n                await deleteCard(card.id);\r\n                history.go(0);\r\n            }\r\n    }\r\n    \r\n    const cardHtml = cards.map(card => {\r\n        return (\r\n            <div key={card.id}>\r\n                <Card card={card} deck={deck} handleDelete={handleDelete} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h3>Cards</h3>\r\n            {cardHtml}\r\n            <Link to={`/decks/${deck.id}/cards/new`}>\r\n                    <button className=\"btn btn-success mt-2 mb-5\">+ Add Card</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React, {useState, useEffect} from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { deleteDeck, readDeck } from \"../utils/api/index\";\r\nimport CardList from \"./CardList\"\r\n\r\n/*\r\n The Deck screen has the following features:\r\n    x The path to this screen should include the deckId (i.e., /decks/:deckId).\r\n    x There is a breadcrumb navigation bar with a link to home / followed by the name of the deck (e.g., Home/React Router).\r\n    x The screen includes the deck name (e.g., \"React Router\") and deck description (e.g., \"React Router is a collection of navigational components that compose declaratively in your application\").\r\n    x The screen includes \"Edit\", \"Study\", \"Add Cards\", and \"Delete\" buttons. Each button takes the user to a different destination, as follows:\r\n        | \"Edit\" | Edit Deck Screen |\r\n        | \"Study\" | Study screen |\r\n        | \"Add Cards\" | Add Card screen |\r\n        | \"Delete\" | Shows a warning message before deleting the deck]\r\n            When the user clicks the \"Delete\" button associated with a card, a warning message is shown and the user can click \"OK\" or \"Cancel\". If the user clicks \"OK\", the card is deleted.\r\n\r\n    - Each card in the deck:\r\n        - is listed on the page under the \"Cards\" heading.\r\n        - shows a question and the answer to the question.\r\n        - has an “Edit” button that takes the user to the Edit - Card screen when clicked.\r\n        - has a “Delete” button that allows that card to be deleted.\r\n*/\r\n\r\nfunction ViewDeck() {\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [deck, setDeck] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n        return () => abortController.abort();\r\n    }, [deckId]);\r\n\r\n    const handleDelete = async () => {\r\n        const confirmDelete = window.confirm(\"Delete this deck?\\nYou will not be able to recover it.\");\r\n        console.log(\"Deleting Deck\", deck.id)\r\n        if (confirmDelete) {\r\n            await deleteDeck(deck.id);\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (!deck.id) {\r\n        return <p>Loading...</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav aria-label='breadcrumb'>\r\n                <ol className=\"breadcrumb\">\r\n                    <li className=\"breadcrumb-item text-primary\"><Link to='/'>Home</Link></li>\r\n                    <li className=\"breadcrumb-item active\" aria-current='page'>{deck.name}</li>\r\n                </ol>\r\n            </nav>\r\n            <h2>\r\n                {deck.name}\r\n                <button className=\"btn btn-danger float-right\" onClick={handleDelete}>Delete</button>\r\n            </h2>\r\n            <p>{deck.description}</p> \r\n            <Link to={`/decks/${deck.id}/edit`}>\r\n                <button className=\"btn btn-primary mr-2 mb-2\">Edit</button>\r\n            </Link>\r\n            <Link to={`/decks/${deck.id}/study`}>\r\n                <button className=\"btn btn-secondary mr-2 mb-2\">Study</button>\r\n            </Link>\r\n            <br /><br />\r\n            <CardList deck={deck} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewDeck;","import React from \"react\";\r\n\r\n\r\nfunction CardForm({setFormData, formData, handleSubmit, back}) {\r\n\r\n\r\n    const handleChange = ({ target }) => {\r\n        setFormData({ ...formData, [target.name]: target.value });\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                    <div className=\"row\">\r\n                        <label htmlFor=\"front\" className=\"col-form-label\"> Front: </label>\r\n                        <div className=\"col\">\r\n                        <textarea\r\n                                className=\"form-control\"\r\n                                id=\"front\"\r\n                                name=\"front\"\r\n                                rows=\"5\"\r\n                                onChange={handleChange}\r\n                                value={formData.front}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"row\">\r\n                        <label htmlFor=\"back\" className=\"col-form-label\"> Back: </label>\r\n                        <div className=\"col\">\r\n                            <textarea\r\n                                className=\"form-control\"\r\n                                id=\"back\"\r\n                                name=\"back\"\r\n                                rows=\"5\"\r\n                                onChange={handleChange}\r\n                                value={formData.back}\r\n                            />\r\n                        </div>\r\n                </div>\r\n                <div className=\"float-right mt-2 mb-2\">\r\n                    {back}\r\n                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default CardForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, Link, useParams } from \"react-router-dom\";\r\nimport { readCard, readDeck, updateCard } from \"../utils/api/index\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n/*\r\nThe Edit Card screen has the following features:\r\n\r\n    - The path to this screen should include the deckId and the cardId (i.e., /decks/:deckId/cards/:cardId/edit).\r\n\r\n    - There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck of which the edited card is a member, and finally the text Edit Card :cardId (e.g., Home/Deck React Router/Edit Card 4).\r\n\r\n    * It displays the same form as the Add Card screen, except it is pre-filled with information for the existing card. It can be edited and updated.\r\n\r\n    - If the user clicks on either \"Save\" or \"Cancel\", the user is taken to the Deck screen.\r\n*/\r\n\r\nfunction EditCard() {\r\n    const { deckId, cardId } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [formData, setFormData] = useState({});\r\n    const [deck, setDeck] = useState({});\r\n\r\n    useEffect( () => {\r\n        const abortController = new AbortController();\r\n        readDeck(deckId, abortController.signal).then(setDeck);\r\n        readCard(cardId, abortController.signal).then(setFormData);\r\n\r\n        return () => abortController.abort();\r\n    }, [deckId, cardId]);\r\n\r\n    // const handleChange = ({ target }) => {\r\n    //     setFormData({ ...formData, [target.name]: target.value });\r\n    // }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await updateCard(formData);\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    const cancel =\r\n        (\r\n            <Link to={`/decks/${deckId}`}>\r\n                 <button className=\"btn btn-secondary mr-2\">\r\n                     Cancel\r\n                 </button>\r\n            </Link>\r\n        )\r\n    \r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n             <nav aria-label='breadcrumb'>\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item text-primary\">\r\n                            <Link to='/'>Home</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item text-primary\">\r\n                            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current='page'>\r\n                            Edit Card {cardId}\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            <h2>Edit Card</h2>\r\n            <br />\r\n            <CardForm setFormData={setFormData} formData={formData} handleSubmit={handleSubmit} back={cancel} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditCard;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../utils/api/index\";\r\nimport CardForm from \"./CardForm\";\r\n\r\n/*\r\n The Add Card screen has the following features:\r\n\r\n    - The path to this screen should include the deckId (i.e., /decks/:deckId/cards/new).\r\n\r\n    - There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck to which the cards are being added, and finally the text Add Card (e.g., Home/React Router/Add Card).\r\n\r\n    - The screen displays the \"React Router: Add Card\" deck title.\r\n\r\n    - A form is shown with the \"front\" and \"back\" fields for a new card. Both fields use a <textarea> tag that can accommodate multiple lines of text.\r\n\r\n    - If the user clicks \"Save\", a new card is created and associated with the relevant deck. Then the form is cleared and the process for adding a card is restarted.\r\n\r\n    - If the user clicks \"Done\", the user is taken to the Deck screen.\r\n*/\r\n\r\nfunction AddCard() {\r\n    const { deckId } = useParams();\r\n\r\n    const initialForm = {\r\n        front: '',\r\n        back: '',\r\n        deckId: deckId\r\n    }\r\n\r\n    const [formData, setFormData] = useState({...initialForm});\r\n    const [deck, setDeck] = useState({});\r\n\r\n    useEffect( () => {\r\n        const abortController = new AbortController();\r\n        readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n        return () => abortController.abort();\r\n    }, [deckId]);\r\n\r\n    // const handleChange = ({ target }) => {\r\n    //     setFormData({ ...formData, [target.name]: target.value });\r\n    // }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await createCard(deckId, formData);\r\n        setFormData({...initialForm})\r\n        //history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    const done =\r\n        (\r\n            <Link to={`/decks/${deckId}`}>\r\n                <button className=\"btn btn-secondary mr-2\">\r\n                     Done\r\n                 </button>\r\n            </Link>\r\n        )\r\n   \r\n    return (\r\n        <>\r\n             <nav aria-label='breadcrumb'>\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item text-primary\">\r\n                            <Link to='/'>Home</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item text-primary\">\r\n                            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current='page'>\r\n                            Add Card\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            <h2>{deck.name}: Add Card</h2>\r\n            <br />\r\n            <CardForm setFormData={setFormData} formData={formData} handleSubmit={handleSubmit} back={done} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCard;","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../utils/api/index\";\r\nimport DeckForm from \"./DeckForm\"\r\n\r\n/*\r\n The Create Deck screen has the following features:\r\n\r\nThe path to this screen should be /decks/new.\r\n\r\n    x There is a breadcrumb navigation bar with a link to home / followed by the text Create Deck (i.e., Home/Create Deck).\r\n    - A form is shown with the appropriate fields for creating a new deck.\r\n        - The name field is an <input> field of type text.\r\n        - The description field is a <textarea> field that can be multiple lines of text.\r\n   -  If the user clicks \"submit\", the user is taken to the Deck screen.\r\n    - If the user clicks \"cancel\", the user is taken to the Home screen.\r\n*/\r\n\r\nfunction CreateDeck() {\r\n    const history = useHistory();\r\n    const initialForm = {\r\n        name: '',\r\n        description: ''\r\n    }\r\n    const [newDeck, setNewDeck] = useState({...initialForm});\r\n\r\n    const handleChange = ({target}) => {\r\n        setNewDeck({ ...newDeck, [target.name]: target.value });\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const addDeck = await createDeck(newDeck);\r\n        history.push(`/decks/${addDeck.id}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav aria-label=\"breadcrumb\">\r\n                <ol className=\"breadcrumb\">\r\n                    <li className=\"breadcrumb-item\">\r\n                        <Link to=\"/\">\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                        Create Deck\r\n                    </li>\r\n                </ol>\r\n                \r\n            </nav>\r\n            <h2>Create Deck</h2>\r\n            <br />\r\n            <form onSubmit={handleSubmit}>\r\n                <DeckForm deck={newDeck} handleChange={handleChange} />\r\n                <div className=\"float-right\">\r\n                    <Link to=\"/\">\r\n                        <button className=\"btn btn-secondary mr-2\">\r\n                            Cancel\r\n                        </button>\r\n                    </Link>\r\n                    <button className=\"btn btn-primary\">Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateDeck;","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport NotFound from \"./NotFound\";\r\nimport Home from \"../Home/Home\";\r\nimport Study from \"../Study/Study\";\r\nimport EditDeck from \"../DeckForms/EditDeck\";\r\nimport ViewDeck from \"../ViewDeck/ViewDeck\";\r\nimport EditCard from \"../CardForms/EditCard\";\r\nimport AddCard from \"../CardForms/AddCard\";\r\nimport CreateDeck from \"../DeckForms/CreateDeck\";\r\n\r\nfunction Layout() {\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Switch>\r\n            <Route path=\"/decks/new\">\r\n              <CreateDeck />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId/study\">\r\n              <Study />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId/edit\">\r\n              <EditDeck />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId/cards/new\">\r\n              <AddCard />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n              <EditCard />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId\">\r\n              <ViewDeck />\r\n            </Route>\r\n            <Route exact={true} path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route>\r\n              <NotFound />\r\n            </Route>\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}